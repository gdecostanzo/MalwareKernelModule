#!/usr/bin/python

import socket
import sys
import os
import time

#for Kademlia
from pydht import DHT
from pydht import sign_verify as sv

#for cache
import anydbm

print 'User Server for Kernel Module started'

host1, port1 = 'localhost', 3000
host2, port2 = 'localhost', 3001
dht2 = DHT(host2, port2, boot_host=host1, boot_port=port1)

server_address = '/tmp/usocket'

# Make sure the socket does not already exist
try:
	os.unlink(server_address)
except OSError:
	if os.path.exists(server_address):
		raise

# Create a UDS socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

# Bind the socket to the port
sock.bind(server_address)

# Listen for incoming connections
sock.listen(1)

while True:
	# Wait for a connection
	connection, client_address = sock.accept()
	try:
		# Receive the data in small chunks and retransmit it
		hash_key = connection.recv(64)
		if hash_key and len(hash_key) == 64:
			cache_outdated = False		
			try:
				db = anydbm.open("/dht_cache/cache", "r")
				cache_value = db[hash_key]
				#if == 1 then hash_key is in the initial cache
				if (cache_value == "1"):
					connection.send("1")
				else:
					last_update = float(cache_value.split(";")[1])
					#3600 = 1 hour 
					if( (time.time() - last_update) < 3600):
						connection.send(cache_value.split(";")[0])
					else:
						cache_outdated = True  
			except KeyError, e:
				cache_outdated = True
				#not in cache
			finally:
				db.close()					
			if (cache_outdated):		
				try:
					#searching in DHT
					sock2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
					server_address = ('localhost', 10000)
					sock2.connect(server_address)
					score = float(dht2[hash_key][0])
					if(score < 1):
						connection.send("0")
						cacheUpdateMsg = hash_key + ":0;" + str(time.time())
						sock2.sendall(cacheUpdateMsg)
					else:
						connection.send("1")
						cacheUpdateMsg = hash_key + ":1;" + str(time.time())
						sock2.sendall(cacheUpdateMsg)
						#reliable
				except KeyError, e1:
					#Hash Key not present				
					connection.send("0")
					cacheUpdateMsg = hash_key + ":0;" + str(time.time())
					sock2.sendall(cacheUpdateMsg)
				finally:
					sock2.close()
	
	except socket.error as e:
		pass			

	finally:
		connection.close()
